// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TerraformLogViewer.Services;

#nullable disable

namespace TerraformLogViewer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TerraformLogViewer.Models.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("HttpReqBody")
                        .HasColumnType("jsonb");

                    b.Property<string>("HttpResBody")
                        .HasColumnType("jsonb");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("integer");

                    b.Property<string>("HttpUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("LogFileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ParsedTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Phase")
                        .HasColumnType("integer");

                    b.Property<string>("RawMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceFile")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TfReqId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TfResourceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TfResourceType")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("LogFileId");

                    b.HasIndex("Phase");

                    b.HasIndex("Status");

                    b.HasIndex("TfReqId");

                    b.HasIndex("TfResourceType");

                    b.HasIndex("Timestamp");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("TerraformLogViewer.Models.LogFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalEntries")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WarningCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UploadedAt");

                    b.HasIndex("UserId");

                    b.ToTable("LogFiles");
                });

            modelBuilder.Entity("TerraformLogViewer.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TerraformLogViewer.Models.LogEntry", b =>
                {
                    b.HasOne("TerraformLogViewer.Models.LogFile", "LogFile")
                        .WithMany("LogEntries")
                        .HasForeignKey("LogFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogFile");
                });

            modelBuilder.Entity("TerraformLogViewer.Models.LogFile", b =>
                {
                    b.HasOne("TerraformLogViewer.Models.User", "User")
                        .WithMany("LogFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TerraformLogViewer.Models.LogFile", b =>
                {
                    b.Navigation("LogEntries");
                });

            modelBuilder.Entity("TerraformLogViewer.Models.User", b =>
                {
                    b.Navigation("LogFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
