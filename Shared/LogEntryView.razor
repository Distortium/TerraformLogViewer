<div class="log-entry @GetEntryCssClasses()" @onclick="ToggleExpanded">
    <div class="log-entry-header">
        <span class="log-level-badge @Entry.Level.ToString().ToLower()">
            @Entry.Level.ToString().ToUpper()
        </span>
        
        <span class="timestamp">
            @GetFormattedTimestamp()
        </span>

        <span class="phase-badge">
            @Entry.Phase.ToString()
        </span>

        @if (!string.IsNullOrEmpty(Entry.TfReqId))
        {
            <span class="req-id" title="Request ID">
                <i class="fas fa-link"></i> @Entry.TfReqId
            </span>
        }

        @if (!string.IsNullOrEmpty(Entry.TfResourceType))
        {
            <span class="resource-type">
                @Entry.TfResourceType
            </span>
        }

        <span class="message-preview">
            @GetMessagePreview()
        </span>

        <div class="log-actions">
            @if (Entry.Status == EntryStatus.Unread)
            {
                <button @onclick="MarkAsRead" @onclick:stopPropagation 
                        class="btn btn-sm btn-outline-success" title="Mark as read">
                    <i class="fas fa-check"></i>
                </button>
            }
            else
            {
                <button @onclick="MarkAsUnread" @onclick:stopPropagation 
                        class="btn btn-sm btn-outline-secondary" title="Mark as unread">
                    <i class="fas fa-eye-slash"></i>
                </button>
            }
        </div>
    </div>

    @if (isExpanded)
    {
        <div class="log-entry-details">
            <div class="raw-message">
                <pre>@Entry.RawMessage</pre>
            </div>

            @if (HasHttpData)
            {
                <div class="http-data">
                    @if (!string.IsNullOrEmpty(Entry.HttpMethod) || !string.IsNullOrEmpty(Entry.HttpUrl))
                    {
                        <div class="http-request">
                            <strong>HTTP Request:</strong>
                            <span class="http-method">@Entry.HttpMethod</span>
                            <span class="http-url">@Entry.HttpUrl</span>
                            @if (Entry.HttpStatusCode.HasValue)
                            {
                                <span class="http-status @GetStatusCssClass()">
                                    @Entry.HttpStatusCode
                                </span>
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Entry.HttpReqBody))
                    {
                        <div class="json-section">
                            <div class="json-header" @onclick="ToggleReqBody" @onclick:stopPropagation>
                                <strong>Request Body</strong>
                                <i class="fas @(showReqBody ? "fa-chevron-down" : "fa-chevron-right")"></i>
                            </div>
                            @if (showReqBody)
                            {
                                <JsonViewer JsonString="@Entry.HttpReqBody" />
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Entry.HttpResBody))
                    {
                        <div class="json-section">
                            <div class="json-header" @onclick="ToggleResBody" @onclick:stopPropagation>
                                <strong>Response Body</strong>
                                <i class="fas @(showResBody ? "fa-chevron-down" : "fa-chevron-right")"></i>
                            </div>
                            @if (showResBody)
                            {
                                <JsonViewer JsonString="@Entry.HttpResBody" />
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public LogEntry Entry { get; set; } = null!;
    [Parameter] public EventCallback<LogEntry> OnMarkAsRead { get; set; }
    [Parameter] public EventCallback<LogEntry> OnMarkAsUnread { get; set; }

    private bool isExpanded = false;
    private bool showReqBody = false;
    private bool showResBody = false;

    private string GetEntryCssClasses()
    {
        var classes = new List<string>
        {
            $"level-{Entry.Level.ToString().ToLower()}",
            $"status-{Entry.Status.ToString().ToLower()}"
        };

        if (isExpanded) classes.Add("expanded");
        if (Entry.Status == EntryStatus.Unread) classes.Add("unread");

        return string.Join(" ", classes);
    }

    private string GetFormattedTimestamp()
    {
        return Entry.Timestamp?.ToString("yyyy-MM-dd HH:mm:ss.fff") ?? "No timestamp";
    }

    private string GetMessagePreview()
    {
        if (Entry.RawMessage.Length <= 150)
            return Entry.RawMessage;

        return Entry.RawMessage.Substring(0, 150) + "...";
    }

    private bool HasHttpData => !string.IsNullOrEmpty(Entry.HttpReqBody) || 
                               !string.IsNullOrEmpty(Entry.HttpResBody) ||
                               !string.IsNullOrEmpty(Entry.HttpMethod);

    private string GetStatusCssClass()
    {
        if (!Entry.HttpStatusCode.HasValue) return "";
        
        return Entry.HttpStatusCode.Value switch
        {
            >= 200 and < 300 => "status-success",
            >= 300 and < 400 => "status-warning",
            >= 400 and < 500 => "status-danger",
            >= 500 => "status-danger",
            _ => ""
        };
    }

    private void ToggleExpanded()
    {
        isExpanded = !isExpanded;
    }

    private void ToggleReqBody()
    {
        showReqBody = !showReqBody;
    }

    private void ToggleResBody()
    {
        showResBody = !showResBody;
    }

    private async Task MarkAsRead()
    {
        await OnMarkAsRead.InvokeAsync(Entry);
    }

    private async Task MarkAsUnread()
    {
        await OnMarkAsUnread.InvokeAsync(Entry);
    }
}