@using Blazor.Diagrams
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Models.Base
@inject IDependencyGraphService GraphService

<div class="dependency-graph-container">
    <div class="graph-toolbar mb-3">
        <button class="btn btn-primary btn-sm" @onclick="ApplyHierarchicalLayout">
            <i class="fas fa-sitemap"></i> Иерархическая layout
        </button>
        <button class="btn btn-secondary btn-sm" @onclick="ApplyForceDirectedLayout">
            <i class="fas fa-project-diagram"></i> Force-Directed layout
        </button>
        <button class="btn btn-outline-secondary btn-sm" @onclick="ZoomToFit">
            <i class="fas fa-expand"></i> Подогнать по размеру
        </button>
        <button class="btn btn-outline-secondary btn-sm" @onclick="ResetZoom">
            <i class="fas fa-search"></i> Сбросить zoom
        </button>
    </div>

    <div class="graph-wrapper">
        @if (_diagram != null)
        {
            <div class="diagram-container">
                <CascadingValue Value="_diagram">
                    <Blazor.Diagrams.Components.DiagramCanvas></Blazor.Diagrams.Components.DiagramCanvas>
                </CascadingValue>
            </div>
        }
        else
        {
            <div class="text-center p-5">
                <p>Граф не загружен</p>
            </div>
        }
    </div>

    @if (_selectedNode != null)
    {
        <div class="node-details mt-3 p-3 border rounded">
            <h6>Детали ресурса</h6>
            <p><strong>Адрес:</strong> @_selectedNode.Resource.Address</p>
            <p><strong>Тип:</strong> @_selectedNode.Resource.Type</p>
            <p><strong>Статус:</strong> @_selectedNode.Resource.Status</p>
            <p><strong>Действие:</strong> @_selectedNode.Resource.Action</p>
            <p><strong>Длительность:</strong> @_selectedNode.Resource.Duration</p>
            
            @if (_selectedNode.Resource.Errors.Any())
            {
                <div class="alert alert-danger mt-2">
                    <h6>Ошибки:</h6>
                    @foreach (var error in _selectedNode.Resource.Errors)
                    {
                        <p>@error.Message</p>
                    }
                </div>
            }
        </div>
    }
</div>

<style>
    .diagram-container {
        width: 100%;
        height: 400px;
        border: 1px solid black; /* Just visual */
    }
</style>

@code {
    private BlazorDiagram? _diagram;
    private GraphLayout? _graphLayout;
    private GraphNode? _selectedNode;

    [Parameter]
    public TerraformLog? ParsedLog { get; set; }

    protected override void OnParametersSet()
    {
        if (ParsedLog != null && _graphLayout == null)
        {
            BuildGraph();
        }
    }

    private void BuildGraph()
    {
        if (ParsedLog == null) return;

        _graphLayout = GraphService.BuildGraphLayout(ParsedLog);
        _diagram = _graphLayout.Diagram;
        StateHasChanged();
    }

    private void ApplyHierarchicalLayout()
    {
        if (_graphLayout == null) return;
        
        var options = new LayoutOptions { HorizontalSpacing = 200, VerticalSpacing = 120 };
        GraphService.ApplyHierarchicalLayout(_graphLayout, options);
        StateHasChanged();
    }

    private void ApplyForceDirectedLayout()
    {
        if (_graphLayout == null) return;
        
        var options = new LayoutOptions();
        GraphService.ApplyForceDirectedLayout(_graphLayout, options);
        StateHasChanged();
    }

    private void ZoomToFit()
    {
        _diagram?.ZoomToFit();
    }

    private void ResetZoom()
    {
        _diagram?.SetZoom(1.0);
    }

    private void OnNodeClicked(NodeModel node)
    {
        if (node is GraphNode graphNode)
        {
            _selectedNode = graphNode;
            StateHasChanged();
        }
    }

    private void OnLinkClicked(BaseLinkModel link)
    {
        // Обработка клика на связь
        Console.WriteLine($"Link clicked: {link.Id}");
    }
}