@using Microsoft.AspNetCore.Components.Authorization
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @ChildContent
        </Authorized>
        <NotAuthorized>
            @if (!_isCheckingAuth)
            {
                <div class="redirect-container">
                    <p>Redirecting to login...</p>
                </div>
            }
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }
    [Inject] private AuthService AuthService { get; set; }

    private bool _isCheckingAuth = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            // Проверяем localStorage на случай, если состояние не синхронизировано
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                _isCheckingAuth = false;
                Navigation.NavigateTo("/login", true);
                return;
            }
        }

        _isCheckingAuth = false;
        StateHasChanged();
    }
}

<style>
    .redirect-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: #000;
        color: white;
    }
</style>