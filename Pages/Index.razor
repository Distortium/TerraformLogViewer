@page "/"
@* @inject AuthService AuthService *@
@inject LogParserService LogParserService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

@* <AuthorizeView>
    <Authorized> *@
        <div class="container-fluid">
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h4>Upload Terraform Logs</h4>
                            <button class="btn btn-outline-secondary" @onclick="Logout">
                                <i class="fas fa-sign-out-alt"></i> Logout
                            </button>
                        </div>
                        <div class="card-body">
                            <div class="upload-area" @ondragover="HandleDragOver" @ondrop="HandleDrop">
                        <InputFile id="fileInput" OnChange="HandleFileSelected" multiple accept=".log,.txt,.json" style="display: none;" />

                                <i class="fas fa-cloud-upload-alt fa-3x mb-3"></i>
                                <h5>Drag & Drop log files here</h5>
                                <p class="text-muted">Supported formats: .log, .txt, .json</p>
                                <button class="btn btn-primary" @onclick="OpenFileDialog">
                                    <i class="fas fa-folder-open me-2"></i>Select Files
                                </button>
                            </div>

                            @if (uploadProgress > 0)
                            {
                                <div class="mt-3">
                                    <div class="progress">
                                        <div class="progress-bar" style="width: @uploadProgress%">
                                            @uploadProgress%
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5>Upload History</h5>
                        </div>
                        <div class="card-body">
                            @if (logFiles.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>File Name</th>
                                                <th>Type</th>
                                                <th>Size</th>
                                                <th>Uploaded</th>
                                                <th>Entries</th>
                                                <th>Errors</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var file in logFiles)
                                            {
                                                <tr>
                                                    <td>@file.FileName</td>
                                                    <td>
                                                        <span class="badge bg-secondary">@file.FileType</span>
                                                    </td>
                                                    <td>@FormatFileSize(file.FileSize)</td>
                                                    <td>@file.UploadedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                                    <td>@file.TotalEntries</td>
                                                    <td>
                                                        @if (file.ErrorCount > 0)
                                                        {
                                                            <span class="text-danger">@file.ErrorCount</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-success">0</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-sm btn-outline-primary"
                                                                @onclick="() => ViewLogs(file.Id)">
                                                            <i class="fas fa-eye"></i> View
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center text-muted py-4">
                                    <i class="fas fa-inbox fa-3x mb-3"></i>
                                    <p>No log files uploaded yet.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
@*     </Authorized>
    <NotAuthorized>
        <div class="text-center">
            <h3>Welcome to Terraform Log Analyzer</h3>
            <p>Please <a href="/login">login</a> or <a href="/register">register</a> to continue.</p>
        </div>
    </NotAuthorized>
</AuthorizeView> *@

@code {
    private List<LogFile> logFiles = new();
    private int uploadProgress = 0;
    private User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        //currentUser = await AuthService.GetCurrentUserAsync();
        //if (currentUser != null)
        //{
        await LoadLogFiles();
        //}
    }

    private async Task OpenFileDialog()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('fileInput').click()");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            await UploadFile(file);
        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        //if (currentUser == null) return;
        currentUser = new User() { Id = Guid.NewGuid() }; // TEMP - ЗАГЛУШКА

        try
        {
            uploadProgress = 10;
            StateHasChanged();

            using var stream = file.OpenReadStream(100 * 1024 * 1024); // 100MB max
            var fileType = file.Name.EndsWith(".json") ? "JSON" : "Text";

            uploadProgress = 50;
            StateHasChanged();

            var lfile = await LogParserService.ParseAndStoreLogsAsync(stream, file.Name, currentUser.Id, fileType);

            logFiles.Add(lfile);

            uploadProgress = 100;
            StateHasChanged();

            await Task.Delay(500); // Show 100% for a moment
            uploadProgress = 0;

            await LoadLogFiles(); // Refresh the list

            await JSRuntime.InvokeVoidAsync("alert", $"File {file.Name} uploaded successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error uploading {file.Name}: {ex.Message}");
            uploadProgress = 0;
            StateHasChanged();
        }
    }

    private void HandleDragOver(DragEventArgs e)
    {
        // Allow drop
    }

    private async void HandleDrop(DragEventArgs e)
    {
        // This would need JavaScript interop for file access in Blazor Server
        await JSRuntime.InvokeVoidAsync("alert", "File drop support requires additional JavaScript setup");
    }

    private async Task LoadLogFiles()
    {
        if (currentUser != null)
        {
            // This would need to be implemented in a service
            // For now, we'll use a mock
            //logFiles = new List<LogFile>();
        }
    }

    private void ViewLogs(Guid fileId)
    {
        Navigation.NavigateTo($"/logs/{fileId}");
    }

    private void Logout()
    {
        //AuthService.Logout();
        Navigation.NavigateTo("/login", true);
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double len = bytes;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}