@page "/plugins/demo"
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<h3>Plugin Demonstration</h3>

@if (logFiles == null)
{
    <p>Loading...</p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Test Plugin with Log File</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Select Log File:</label>
                        <select @bind="selectedLogFileId" class="form-select">
                            <option value="">Choose log file...</option>
                            @foreach (var file in logFiles)
                            {
                                <option value="@file.Id">@file.FileName (@file.TotalEntries entries)</option>
                            }
                        </select>
                    </div>

                    <button class="btn btn-primary" @onclick="TestPlugin" disabled="@(!HasSelectedFile)">
                        <i class="fas fa-play"></i> Test Plugin
                    </button>

                    <button class="btn btn-outline-info ms-2" @onclick="CheckPluginStatus">
                        <i class="fas fa-heartbeat"></i> Check Plugin Status
                    </button>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Plugin Status</h5>
                </div>
                <div class="card-body">
                    @if (pluginStatus != null)
                    {
                        @foreach (var plugin in pluginStatus)
                        {
                            <div class="mb-2 p-2 @(plugin.IsHealthy ? "bg-light" : "bg-warning")">
                                <strong>@plugin.Name</strong> (@plugin.Type)
                                <br />
                                <span class="small">
                                    Endpoint: @plugin.Endpoint
                                    <br />
                                    Status:
                                    <span class="@(plugin.IsHealthy ? "text-success" : "text-danger")">
                                        @(plugin.IsHealthy ? "Healthy" : "Unhealthy")
                                    </span>
                                </span>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    @if (testResult != null)
    {
        <div class="card mt-4">
            <div class="card-header">
                <h5>Plugin Test Results</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <strong>Original Entries:</strong> @testResult.OriginalEntries
                    </div>
                    <div class="col-md-4">
                        <strong>Filtered Errors:</strong> @testResult.FilteredErrors
                    </div>
                    <div class="col-md-4">
                        <strong>Error Groups:</strong> @testResult.ErrorGroups.Count()
                    </div>
                </div>

                @if (testResult.ErrorGroups.Any())
                {
                    <h6 class="mt-3">Error Patterns Found:</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Pattern</th>
                                    <th>Count</th>
                                    <th>Frequency/Hour</th>
                                    <th>Examples</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var group in testResult.ErrorGroups)
                                {
                                    <tr>
                                        <td>@group.Pattern</td>
                                        <td>@group.Count</td>
                                        <td>@group.Frequency.ToString("F2")</td>
                                        <td>
                                            @if (group.Examples.Any())
                                            {
                                                <details>
                                                    <summary>@group.Examples.Count() examples</summary>
                                                    @foreach (var example in group.Examples)
                                                    {
                                                        <div class="small text-muted">@GetShortMessage(example)</div>
                                                    }
                                                </details>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    private List<LogFile> logFiles = new();
    private List<PluginStatus> pluginStatus = new();
    private TestResult? testResult = null;
    private Guid? selectedLogFileId = null;
    private HttpClient _http;

    private bool HasSelectedFile => selectedLogFileId.HasValue && selectedLogFileId.Value != Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        var baseUri = new Uri(Navigation.BaseUri);
        _http = HttpClientFactory.CreateClient();
        _http.BaseAddress = new Uri($"{baseUri.Scheme}://{baseUri.Host}:{baseUri.Port}/");
        await LoadLogFiles();
        await CheckPluginStatus();
    }

    private async Task LoadLogFiles()
    {
        try
        {
            logFiles = await _http.GetFromJsonAsync<List<LogFile>>("/api/v1/logs") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading log files: {ex.Message}");
        }
    }

    private async Task CheckPluginStatus()
    {
        try
        {
            pluginStatus = await _http.GetFromJsonAsync<List<PluginStatus>>("/api/v1/plugindemo/plugin-status") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking plugin status: {ex.Message}");
        }
    }

    private async Task TestPlugin()
    {
        if (!selectedLogFileId.HasValue) return;

        try
        {
            var response = await _http.PostAsync($"/api/v1/plugindemo/test-plugin/{selectedLogFileId}", null);
            if (response.IsSuccessStatusCode)
            {
                testResult = await response.Content.ReadFromJsonAsync<TestResult>();
                StateHasChanged();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error testing plugin: {ex.Message}");
        }
    }

    private string GetShortMessage(string message)
    {
        return message.Length > 50 ? message.Substring(0, 50) + "..." : message;
    }

    // Модели для UI
    public class PluginStatus
    {
        public string Name { get; set; } = string.Empty;
        public string Endpoint { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public bool IsHealthy { get; set; }
        public DateTime LastChecked { get; set; }
    }

    public class TestResult
    {
        public int OriginalEntries { get; set; }
        public int FilteredErrors { get; set; }
        public List<ErrorGroup> ErrorGroups { get; set; } = new();
        public int ProcessedEntries { get; set; }
        public string PluginStatus { get; set; } = string.Empty;
    }

    public class ErrorGroup
    {
        public string Pattern { get; set; } = string.Empty;
        public int Count { get; set; }
        public double Frequency { get; set; }
        public List<string> Examples { get; set; } = new();
    }
}